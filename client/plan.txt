03/11/2022
CLIENT side plan:

- Fix pages: Home, Contact, Error, Login, Register, Profile (Index for single export page)

- Routes (use react-router-dom)

- Register page:
  - Try using formik for frontend validation.
  - Get form input from user and post to backend

- Login page:
  - similar to register, copy paste and make changes
  - get form input from user and post to backend for authentication

- Profile page:
 - show user information 
 - get user info from backend response
 - render object data one by one

04/11/2022

- Protected routing:
  - install redux for to manage state of cookie and use for protected routing
  - create store
  - create slice
   - create reducer with boolean to change loggedIn state
  - provide store for app with Provider

05/11/2022
- Persist state of isLoggedIn over refreshes: 
 - Local storage set middleware when calling reducer
- Refresh token:
 - call refresh route on a set interval so that token does not expire and can be refreshed

ISSUES:
-REFRESH TOKEN:
 - when user logeed in and refresh token working, if changing to contact route,
 the refresh is not called --> the cookie expires.
--resolved:
 - put user state in the redux state so it is available from contact page
 - if user is loggedin and goes to contact page, keep calling the refreshtoken

05/11/2022
 - verify email on Register
 - reset password 
 - Make blog API


08/11/2022 Blog page

// Blogs page (user and admin)
// create blogSlice
// use createAsyncThunk to GET all blogs from blogs api
// create initialState type for Blog
// Get all blogs /api/blogs
// Add search bar (later)

// Admin has a dashboard -->
// Create blog
// Edit blog
// Update blog
// Delete Blog

09/11/2022 

Refresh token bug: (FIXED)
// Make sure it calls the profile route on first render --> then refresh route subesquently
// Put all profile fetch logic in the user slice.
// get rid of useState.

Blog page
// Create single <Blog/> component so all blogs can be mapped.
// Style blog page 

Fix the logout function to a onClick event. (FIXED)

12/11/2022 

Admin:
// Create another field in user state (isAdmin)
// update types and localstorage middleware
// add link to user login page to direct to admin login
// create admin login page
// after admin login, direct to admin dashboard (blogs page)

EDIT BLOG
// Create a edit link for every Blog
// Create a type for Blog (add to types)
// Onclick, pass id of specific blog in url for edit
// create post request for edit blog in blog services

CREATE BLOG
//Create a add blog link at top of dashboard
// create add blog page
// onClick, navigate to new blog form page
// post route for add blog
// on sucess --> redirect to dashboard

DELETE BLOG
// Create a DELETE link for every Blog
// Onclick, pass id of specific blog in url for delete
// create post request for delete blog in blog services
// on sucess --> redirect to dashboard

13/11/2022 

Implement pagination and searchbar for blogs
Create form with search input and label on blogs page
Onclick of search bar, dispatch fetchBlogs with the search query


